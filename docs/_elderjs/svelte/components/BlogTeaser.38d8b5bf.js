import { e as element, t as text, c as claim_element, a as children, b as claim_text, d as detach_dev, f as add_location, i as insert_dev, g as append_dev, s as set_data_dev, h as dispatch_dev, j as attr_dev, k as set_style, l as create_component, m as claim_component, n as mount_component, o as transition_in, p as transition_out, q as destroy_component, v as validate_slots, S as SvelteComponentDev, r as init, u as safe_not_equal } from '../index-50e9cdeb.js';
import Card from './Card.f8781506.js';

/* src/components/BlogTeaser.svelte generated by Svelte v3.38.3 */
const file = "src/components/BlogTeaser.svelte";

// (9:0) <Card>
function create_default_slot(ctx) {
	let p;
	let t_value = /*blog*/ ctx[0].frontmatter.excerpt + "";
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 11, 2, 397);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*blog*/ 1 && t_value !== (t_value = /*blog*/ ctx[0].frontmatter.excerpt + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(9:0) <Card>",
		ctx
	});

	return block;
}

// (10:2) 
function create_thumb_slot(ctx) {
	let div;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			img = claim_element(div_nodes, "IMG", { src: true, alt: true, style: true });
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			if (img.src !== (img_src_value = /*blog*/ ctx[0].frontmatter.thumb)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Thumbnail for blog post");
			set_style(img, "width", "100%");
			add_location(img, file, 9, 20, 183);
			attr_dev(div, "slot", "thumb");
			add_location(div, file, 9, 2, 165);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*blog*/ 1 && img.src !== (img_src_value = /*blog*/ ctx[0].frontmatter.thumb)) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_thumb_slot.name,
		type: "slot",
		source: "(10:2) ",
		ctx
	});

	return block;
}

// (11:2) 
function create_header_slot(ctx) {
	let div;
	let h4;
	let a;
	let t_value = /*blog*/ ctx[0].frontmatter.title + "";
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			div = element("div");
			h4 = element("h4");
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			h4 = claim_element(div_nodes, "H4", {});
			var h4_nodes = children(h4);
			a = claim_element(h4_nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach_dev);
			h4_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = /*helpers*/ ctx[1].permalinks.blog({ slug: /*blog*/ ctx[0].slug }));
			add_location(a, file, 10, 25, 300);
			add_location(h4, file, 10, 21, 296);
			attr_dev(div, "slot", "header");
			add_location(div, file, 10, 2, 277);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h4);
			append_dev(h4, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*blog*/ 1 && t_value !== (t_value = /*blog*/ ctx[0].frontmatter.title + "")) set_data_dev(t, t_value);

			if (dirty & /*helpers, blog*/ 3 && a_href_value !== (a_href_value = /*helpers*/ ctx[1].permalinks.blog({ slug: /*blog*/ ctx[0].slug }))) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_header_slot.name,
		type: "slot",
		source: "(11:2) ",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let card;
	let current;

	card = new Card({
			props: {
				$$slots: {
					header: [create_header_slot],
					thumb: [create_thumb_slot],
					default: [create_default_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(card.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true });
			var div_nodes = children(div);
			claim_component(card.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "width", "300px");
			set_style(div, "padding", "1em");
			set_style(div, "max-width", "300px");
			add_location(div, file, 7, 0, 98);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(card, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const card_changes = {};

			if (dirty & /*$$scope, helpers, blog*/ 7) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(card);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("BlogTeaser", slots, []);
	let { blog } = $$props;
	let { helpers } = $$props;
	const writable_props = ["blog", "helpers"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<BlogTeaser> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("blog" in $$props) $$invalidate(0, blog = $$props.blog);
		if ("helpers" in $$props) $$invalidate(1, helpers = $$props.helpers);
	};

	$$self.$capture_state = () => ({ Card, blog, helpers });

	$$self.$inject_state = $$props => {
		if ("blog" in $$props) $$invalidate(0, blog = $$props.blog);
		if ("helpers" in $$props) $$invalidate(1, helpers = $$props.helpers);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [blog, helpers];
}

class BlogTeaser extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { blog: 0, helpers: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BlogTeaser",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*blog*/ ctx[0] === undefined && !("blog" in props)) {
			console.warn("<BlogTeaser> was created without expected prop 'blog'");
		}

		if (/*helpers*/ ctx[1] === undefined && !("helpers" in props)) {
			console.warn("<BlogTeaser> was created without expected prop 'helpers'");
		}
	}

	get blog() {
		throw new Error("<BlogTeaser>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set blog(value) {
		throw new Error("<BlogTeaser>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get helpers() {
		throw new Error("<BlogTeaser>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set helpers(value) {
		throw new Error("<BlogTeaser>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default BlogTeaser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmxvZ1RlYXNlci4zOGQ4YjViZi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQmxvZ1RlYXNlci5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IENhcmQgZnJvbSAnLi9DYXJkLnN2ZWx0ZSc7XG5cbiAgZXhwb3J0IGxldCBibG9nO1xuICBleHBvcnQgbGV0IGhlbHBlcnM7XG48L3NjcmlwdD5cblxuPGRpdiBzdHlsZT1cIndpZHRoOjMwMHB4OyBwYWRkaW5nOiAxZW07IG1heC13aWR0aDozMDBweDtcIj5cbjxDYXJkPlxuICA8ZGl2IHNsb3Q9XCJ0aHVtYlwiPjxpbWcgc3JjPXtibG9nLmZyb250bWF0dGVyLnRodW1ifSBhbHQ9XCJUaHVtYm5haWwgZm9yIGJsb2cgcG9zdFwiIHN0eWxlPVwid2lkdGg6IDEwMCVcIi8+PC9kaXY+XG4gIDxkaXYgc2xvdD1cImhlYWRlclwiPjxoND48YSBocmVmPXtoZWxwZXJzLnBlcm1hbGlua3MuYmxvZyh7IHNsdWc6IGJsb2cuc2x1ZyB9KX0+e2Jsb2cuZnJvbnRtYXR0ZXIudGl0bGV9PC9hPjwvaDQ+PC9kaXY+XG4gIDxwPntibG9nLmZyb250bWF0dGVyLmV4Y2VycHR9PC9wPlxuPC9DYXJkPlxuPC9kaXY+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O3dCQVdNLEdBQUksSUFBQyxXQUFXLENBQUMsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZEQUF4QixHQUFJLElBQUMsV0FBVyxDQUFDLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZDQUZBLEdBQUksSUFBQyxXQUFXLENBQUMsS0FBSzs7Ozs7Ozs7Ozs7O21FQUF0QixHQUFJLElBQUMsV0FBVyxDQUFDLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQzZCLEdBQUksSUFBQyxXQUFXLENBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0RBQXJFLEdBQU8sSUFBQyxVQUFVLENBQUMsSUFBSSxHQUFHLElBQUksV0FBRSxHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs2REFBTSxHQUFJLElBQUMsV0FBVyxDQUFDLEtBQUs7O21GQUFyRSxHQUFPLElBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxJQUFJLFdBQUUsR0FBSSxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQVA5RCxJQUFJO09BQ0osT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
